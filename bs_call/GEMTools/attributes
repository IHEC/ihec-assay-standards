src/gem_tools.c:  { 201, "mmap-input", GT_OPT_NO_ARGUMENT, GT_OPT_NONE, 2 , false, "" , "" },
src/gem_tools.c:  { 509, "map-id", GT_OPT_REQUIRED, GT_OPT_STRING, 5 , true, "<SequenceId>[,...] (Eg 'Chr1','Chr2')" , "" },
src/gem_tools.c:  { 200, "mmap-input", GT_OPT_NO_ARGUMENT, GT_OPT_NONE, 2 , false, "" , "" },
src/gem_tools.c:  { 302, "mmap-input", GT_OPT_NO_ARGUMENT, GT_OPT_NONE, 3 , false, "" , "" },
src/gem_tools.c:  { 302, "mmap-input", GT_OPT_NO_ARGUMENT, GT_OPT_NONE, 3 , false, "" , "" },
src/gem_tools.c:   { 200, "mmap-input", GT_OPT_NO_ARGUMENT, GT_OPT_NONE, 3 , false, "" , "" },
src/gt_alignment.c:      gt_string_get_string(map->seq_name),gt_alignment_dictionary_element);
src/gt_alignment.c:    *alg_dicc_elem = gt_alignment_dictionary_element_add(alignment_dictionary,gt_string_get_string(map->seq_name));
src/gt_input_map_parser.c:  if ((error_code=gt_imp_parse_strand(text_line,&(donor_map->strand)))) GT_IMP_PARSE_SPLIT_MAP_CLEAN1__RETURN(error_code);
src/gt_input_map_parser.c:  if ((error_code=gt_imp_parse_strand(text_line,&(acceptor_map->strand)))) GT_IMP_PARSE_SPLIT_MAP_CLEAN2__RETURN(error_code);
src/gt_input_map_parser.c:    if ((error_code=gt_imp_parse_strand(text_line,&(map->strand)))) GT_IMP_PARSE_MAP_CLEAN__RETURN(error_code);
src/gt_input_map_parser.c:    GT_PARSE_NUMBER(text_line,map->position);
src/gt_input_sam_parser.c:    GT_ISP_PARSE_SAM_ALG_PARSE_NUMBER(map->position);
src/gt_input_sam_parser.c:      if(map->attributes==NULL){
src/gt_input_sam_parser.c:        map->attributes = gt_attributes_new();
src/gt_input_sam_parser.c:      attributes = map->attributes;
src/gt_input_sam_parser.c:  GT_ISP_PARSE_SAM_ALG_PARSE_NUMBER(map->position);
src/gt_input_sam_parser.c:  if (map->position==0) is_mapped=false; /* Unmapped */
src/gt_input_sam_parser.c:  GT_ISP_PARSE_SAM_ALG_PARSE_NUMBER(map->phred_score);
src/gt_map.c:  map->seq_name = gt_string_new(GT_MAP_INITIAL_SEQ_NAME_SIZE);
src/gt_map.c:  map->position = 0;
src/gt_map.c:  map->base_length = 0;
src/gt_map.c:  map->gt_score = GT_MAP_NO_GT_SCORE;
src/gt_map.c:  map->phred_score = GT_MAP_NO_PHRED_SCORE;
src/gt_map.c:  map->mismatches = gt_vector_new(GT_MAP_NUM_INITIAL_MISMS,sizeof(gt_misms));
src/gt_map.c:  map->next_block.map = NULL;
src/gt_map.c:  map->attributes = NULL;
src/gt_map.c:  gt_string_clear(map->seq_name);
src/gt_map.c:  map->position = 0;
src/gt_map.c:  map->base_length = 0;
src/gt_map.c:  map->gt_score = GT_MAP_NO_GT_SCORE;
src/gt_map.c:  map->phred_score = GT_MAP_NO_PHRED_SCORE;
src/gt_map.c:  map->next_block.map = NULL;
src/gt_map.c:  if (map->attributes!=NULL) gt_attributes_clear(map->attributes);
src/gt_map.c:  gt_string_delete(map->seq_name);
src/gt_map.c:  gt_vector_delete(map->mismatches);
src/gt_map.c:  if (map->attributes!=NULL) gt_attributes_delete(map->attributes);
src/gt_map.c:  if (map->next_block.map != NULL) gt_map_delete(map->next_block.map);
src/gt_map.c:  return gt_string_get_string(map->seq_name);
src/gt_map.c:  return gt_string_get_length(map->seq_name);
src/gt_map.c:  return map->seq_name;
src/gt_map.c:  gt_string_set_nstring_static(map->seq_name,seq_name,length);
src/gt_map.c:  gt_string_set_nstring(map->seq_name,gt_string_get_string(seq_name),gt_string_get_length(seq_name));
src/gt_map.c:  return map->strand;
src/gt_map.c:  map->strand = strand;
src/gt_map.c:  return map->base_length;
src/gt_map.c:  map->base_length = length;
src/gt_map.c:  return map->position;
src/gt_map.c:  map->position = position;
src/gt_map.c:    if (last_misms->position+last_misms->size==map->base_length && last_misms->misms_type==DEL) return last_misms->size;
src/gt_map.c:  return map->position-gt_map_get_left_trim_length(map);
src/gt_map.c:  return map->position+gt_map_get_length(map) - 1;
src/gt_map.c:  gt_vector_insert(map->mismatches,*misms,gt_misms);
src/gt_map.c:  gt_vector_clear(map->mismatches);
src/gt_map.c:  return gt_vector_get_elm(map->mismatches,offset,gt_misms);
src/gt_map.c:  gt_vector_set_elm(map->mismatches,offset,gt_misms,*misms);
src/gt_map.c:  return gt_vector_get_used(map->mismatches);
src/gt_map.c:  gt_vector_set_used(map->mismatches,num_misms);
src/gt_map.c:    gt_misms* const misms_vector = gt_vector_get_mem(map->mismatches,gt_misms);
src/gt_map.c:    const uint64_t remaining_misms = gt_vector_get_used(map->mismatches)-removed_misms;
src/gt_map.c:    gt_vector_set_used(map->mismatches,remaining_misms);
src/gt_map.c:  map->base_length -= length;
src/gt_map.c:  map->position += length;
src/gt_map.c:  const uint64_t misms_used = gt_vector_get_used(map->mismatches);
src/gt_map.c:  gt_misms* misms_vector = gt_vector_get_mem(map->mismatches,gt_misms);
src/gt_map.c:  gt_vector_set_used(map->mismatches,misms_used-misms_removed);
src/gt_map.c:  map->base_length -= length;
src/gt_map.c:  if (gt_vector_get_used(map->mismatches) > 0) {
src/gt_map.c:    gt_vector_reserve_additional(map->mismatches,1);
src/gt_map.c:    const uint64_t num_misms = gt_vector_get_used(map->mismatches);
src/gt_map.c:    gt_misms* const misms_vector = gt_vector_get_mem(map->mismatches,gt_misms);
src/gt_map.c:    gt_vector_add_used(map->mismatches,1);
src/gt_map.c:  GT_VECTOR_ITERATE_OFFSET(map->mismatches,misms,misms_pos,1,gt_misms) {
src/gt_map.c:  map->base_length += length;
src/gt_map.c:  // map->position -= length; // BUG
src/gt_map.c:  const uint64_t num_misms = gt_vector_get_used(map->mismatches);
src/gt_map.c:    if (last_misms->position+last_misms->size==map->base_length && last_misms->misms_type==DEL) {
src/gt_map.c:      map->base_length += length;
src/gt_map.c:  misms.position = map->base_length;
src/gt_map.c:  map->base_length += length;
src/gt_map.c:  return (map->attributes==NULL) ? NULL : gt_attributes_get(map->attributes,attribute_id);
src/gt_map.c:  if (map->attributes==NULL) {
src/gt_map.c:    map->attributes = gt_attributes_new();
src/gt_map.c:  gt_attributes_add_primitive(map->attributes,attribute_id,attribute,element_size);
src/gt_map.c:  return (map->next_block.map!=NULL);
src/gt_map.c:  return map->next_block.map;
src/gt_map.c:  map->next_block.junction = (next_map!=NULL) ? junction : NO_JUNCTION;
src/gt_map.c:  map->next_block.junction_size = junction_size;
src/gt_map.c:  map->next_block.map = next_map;
src/gt_map.c:  gt_map_junction aux_next_block = map->next_block;
src/gt_map.c:  map->next_block.junction = junction;
src/gt_map.c:  map->next_block.junction_size = junction_size;
src/gt_map.c:  map->next_block.map = next_map;
src/gt_map.c:  next_map->next_block = aux_next_block;
src/gt_map.c:  return map->next_block.junction;
src/gt_map.c:  return (gt_map_has_next_block(map)) ? map->next_block.junction_size : 0;
src/gt_map.c:  return (map->strand==FORWARD) ? gt_map_get_position(map): gt_map_get_position(gt_map_segment_get_last_block(map));
src/gt_map.c:  map_mism_iterator->total_pos = gt_vector_get_used(map->mismatches);
src/gt_map.c:  map_mism_iterator->next_misms = gt_vector_get_mem(map->mismatches,gt_misms);
src/gt_map.c:  if (gt_expect_true(map_mism_iterator->next_pos<gt_vector_get_used(map->mismatches))) {
src/gt_map.c:    gt_misms* const misms = gt_vector_get_elm(map->mismatches,map_mism_iterator->next_pos,gt_misms);
src/gt_map.c:  map_block_iterator->next_map = (returned_map!=NULL) ? returned_map->next_block.map : NULL;
src/gt_map.c:  gt_string_copy(map_cpy->seq_name,map->seq_name);
src/gt_map.c:  map_cpy->position = map->position;
src/gt_map.c:  map_cpy->base_length = map->base_length;
src/gt_map.c:  map_cpy->strand = map->strand;
src/gt_map.c:  map_cpy->phred_score = map->phred_score;
src/gt_map.c:  map_cpy->gt_score = map->gt_score;
src/gt_map.c:  gt_vector_copy(map_cpy->mismatches,map->mismatches);
src/gt_map.c:  map_cpy->next_block = map->next_block;
src/gt_map.c:  map_cpy->next_block.junction = map->next_block.junction;
src/gt_map.c:  map_cpy->next_block.junction_size = map->next_block.junction_size;
src/gt_map.c:  if (map->next_block.map!=NULL) map_cpy->next_block.map = gt_map_copy(map->next_block.map);
src/gt_map_align.c:      map->position+=i;
src/gt_map_metrics.c:  int64_t length = map->base_length;
src/gt_map_metrics.c:  return gt_vector_get_used(map->mismatches);
src/gt_map_metrics.c:  int64_t bases_aligned = map->base_length;
src/gt_map_score.c:  return map->gt_score;
src/gt_map_score.c:  map->gt_score = score;
src/gt_map_score.c:  return map->phred_score;
src/gt_map_score.c:  map->phred_score = phred_score;
src/gt_map_score.c:					map->gt_score=gt_map_calculate_gt_score(al[rd],map,ms_attr);
src/gt_map_score.c:					attr.gt_score=rd?(map->gt_score<<16):map->gt_score;
src/gt_map_score.c:	return ksize+nbl*(sizeof(map->position)+sizeof(map->strand));
src/gt_map_score.c:					size_t ssize=gt_string_get_length(mp1->map->seq_name);
src/gt_map_score.c:					size_t key_size=ssize+2*sizeof(mp1->map->position);
src/gt_map_score.c:					memcpy(buf,gt_string_get_string(mp1->map->seq_name),ssize);
src/gt_map_score.c:					memcpy(buf+ssize,&mp1->map->position,sizeof(mp1->map->position));
src/gt_map_score.c:					memcpy(buf+ssize+sizeof(mp1->map->position),&mp2->map->position,sizeof(mp1->map->position));
src/gt_map_score.c:			uint64_t score=map->gt_score;
src/gt_output_sam.c:      gt_output_sam_calculate_flag_se(true,map->strand,secondary_alignment,supplementary_alignment,not_passing_QC,PCR_duplicate): // Mapped
src/gt_output_sam.c:      (map!=NULL) ? map->strand : FORWARD,   /* read_strand */
src/gt_output_sam.c:      PRIgts_content(map_ph->map->seq_name),
src/gt_output_sam.c:      (map_ph->map->strand==FORWARD)?'+':'-',
src/gt_output_sam.c:    gt_gprintf(gprinter,"\t"PRIgts"\t%"PRIu64"\t%"PRIu8"\t",PRIgts_content(map->seq_name),position,phred_score);
src/gt_output_sam.c:    gt_gprintf(gprinter,"\t"PRIgts"\t%"PRIu64"\t%"PRIu8"\t",PRIgts_content(map->seq_name),position,phred_score);
src/gt_output_sam.c:    if (map!=NULL && !gt_string_equals(map->seq_name,mate->seq_name)) {
src/gt_output_sam.c:    attributes = gt_attributes_get_sam_attributes(map_ph->map->attributes);
src/gt_output_sam.c: *       1.- map->attributes{GT_ATTR_ID_SAM_FLAGS} / mmap_attributes->attributes{GT_ATTR_ID_SAM_FLAGS}
src/gt_output_sam.c:    		gt_gprintf(gpr,"%c"PRIgts",%"PRIu64",%c,",sep,PRIgts_content(mph->map->seq_name),gt_map_get_global_coordinate(mph->map),
src/gt_output_sam.c:    				(mph->map->strand==FORWARD)?'+':'-');
src/gt_output_sam.c:    		gt_gprintf(gpr,",%d",mph->map->phred_score);
src/gt_sam_attributes.c:  	int mapq = func_params->alignment_info->map->phred_score;
src/gt_sam_attributes.c:  	uint64_t sc=func_params->alignment_info->map->gt_score;
src/gt_stats.c:        gt_stats_add_map_to_population(population_profile->_local_diversity_hash,map->seq_name);
src/gt_stats.c:        gt_stats_add_map_to_population(population_profile->_global_diversity_hash,map->seq_name);
src/gt_template_utils.c:  int score_a = ph_map_a->map->phred_score;
src/gt_template_utils.c:  int score_b = ph_map_b->map->phred_score;
src/gt_template_utils.c:  const uint64_t score_a = ph_map_a->map->gt_score;
src/gt_template_utils.c:  const uint64_t score_b = ph_map_b->map->gt_score;
src/gt_template_utils.c:  const uint64_t score_a = ph_map_a->map->gt_score;
src/gt_template_utils.c:  const uint64_t score_b = ph_map_b->map->gt_score;
